// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------------ //
// tone_dynamic //
// ------------ //

#define tone_dynamic_wrap_target 0
#define tone_dynamic_wrap 10
#define tone_dynamic_pio_version 0

static const uint16_t tone_dynamic_program_instructions[] = {
            //     .wrap_target
    0x8080, //  0: pull   noblock
    0xa047, //  1: mov    y, osr
    0x6030, //  2: out    x, 16
    0xa0c7, //  3: mov    isr, osr
    0xe001, //  4: set    pins, 1
    0x0045, //  5: jmp    x--, 5
    0xe000, //  6: set    pins, 0
    0xa026, //  7: mov    x, isr
    0x0048, //  8: jmp    x--, 8
    0xa0e2, //  9: mov    osr, y
    0xa027, // 10: mov    x, osr
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program tone_dynamic_program = {
    .instructions = tone_dynamic_program_instructions,
    .length = 11,
    .origin = -1,
    .pio_version = tone_dynamic_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config tone_dynamic_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + tone_dynamic_wrap_target, offset + tone_dynamic_wrap);
    return c;
}

static inline void tone_dynamic_program_init(PIO pio, uint sm, uint offset, uint pin) {
  pio_gpio_init(pio, pin);
  pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
  pio_sm_config c = tone_dynamic_program_get_default_config(offset);
  sm_config_set_set_pins(&c, pin, 1);
  pio_sm_init(pio, sm, offset, &c);
}

#endif

